plugins {
    id 'java'
    id 'com.diffplug.spotless' version "7.0.2"
    id 'io.micronaut.application' version "4.4.4"
    id 'io.micronaut.aot' version "4.4.4"
}

group 'com.github.ankowals.example'
version '1.0-SNAPSHOT'

repositories {
    mavenCentral()
}

dependencies {
    annotationProcessor("io.micronaut.data:micronaut-data-processor")
    annotationProcessor("io.micronaut:micronaut-http-validation")
    annotationProcessor("io.micronaut.openapi:micronaut-openapi")
    annotationProcessor("io.micronaut.validation:micronaut-validation-processor")
    annotationProcessor("org.mapstruct:mapstruct-processor:1.6.3")

    implementation("io.micronaut:micronaut-jackson-databind")
    implementation("io.micronaut.flyway:micronaut-flyway")
    implementation("io.micronaut.sql:micronaut-hibernate-jpa")
    implementation("io.micronaut.data:micronaut-data-hibernate-jpa")
    implementation("io.micronaut.sql:micronaut-jdbc-hikari")
    implementation("io.micronaut.validation:micronaut-validation")
    implementation("jakarta.validation:jakarta.validation-api")
    implementation("io.micronaut:micronaut-http-client")
    implementation("io.micronaut.openapi:micronaut-openapi-annotations")
    implementation("io.swagger.core.v3:swagger-annotations:2.2.28")
    implementation("org.mapstruct:mapstruct:1.6.3")

    runtimeOnly("ch.qos.logback:logback-classic")
    runtimeOnly("org.flywaydb:flyway-database-postgresql")
    runtimeOnly("org.postgresql:postgresql")
    runtimeOnly("org.yaml:snakeyaml")

    testImplementation("org.testcontainers:postgresql")
    testImplementation("org.testcontainers:testcontainers")
    testImplementation("org.assertj:assertj-core:3.27.3")
    testImplementation("org.awaitility:awaitility:4.3.0")
    testImplementation("org.junit.platform:junit-platform-launcher:1.12.0")
    testImplementation("io.rest-assured:rest-assured:5.5.1")
    testImplementation("com.fasterxml.jackson.dataformat:jackson-dataformat-csv:2.18.2")
}

application {
    mainClass = "com.github.ankowals.example.rest.Application"
}

java {
    sourceCompatibility = JavaVersion.toVersion("21")
    targetCompatibility = JavaVersion.toVersion("21")
}

graalvmNative.toolchainDetection = false

micronaut {
    runtime("netty")
    testRuntime("junit5")
    processing {
        incremental(true)
        annotations("com.github.ankowals.example.*")
    }

    aot {
        // Please review carefully the optimizations enabled below
        // Check https://micronaut-projects.github.io/micronaut-aot/latest/guide/ for more details
        optimizeServiceLoading = false
        convertYamlToJava = false
        precomputeOperations = true
        cacheEnvironment = true
        optimizeClassLoading = true
        deduceEnvironment = true
        optimizeNetty = true
        replaceLogbackXml = true
    }
}

tasks.named("dockerfileNative") {
    jdkVersion = "21"
}

spotless {
    java {
        googleJavaFormat()
    }
}